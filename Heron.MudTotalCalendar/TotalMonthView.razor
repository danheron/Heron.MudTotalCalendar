@inherits MonthView

@Render

@code {

    protected override RenderFragment RenderHeader =>
        @<tr>
            @for (var i = 0; i < 7; i++)
            {
                <th>
                    @Cells[i].Date.ToString("ddd")
                </th>
            }
            @if (ShowTotalColumn)
            {
                <th>Total</th>
            }
        </tr>;

    protected override RenderFragment RenderBody => __builder =>
    {
        for (var week = 0; week < Cells.Count / ColumnCount; week++)
        {
            <tr style="@RowStyle">
                @for (var i = week * ColumnCount; i < (week + 1) * ColumnCount; i++)
                {
                    var cell = Cells[i];
                    @RenderCell(cell)
                }
            </tr>
        }
        if (TotalCalendar.ShowMonthTotal)
        {
            RenderMonthTotalRow(__builder);   
        }
    };
    
    protected override RenderFragment RenderCell(CalendarCell cell) =>
        @<td>
            @if (((TotalCell)cell).WeekTotal)
            {
                @RenderWeekTotalCell(cell)
            }
            else if (((TotalCell)cell).MonthTotal)
            {
                @RenderMonthTotalCell(cell)
            }
            else
            {
                @RenderDayTotalCell(cell)
            }
        </td>;

    /// <summary>
    /// Renders the last row of the grid that shows the month total.
    /// </summary>
    protected virtual RenderFragment RenderMonthTotalRow =>
        @<tr>
            @for (var i = 0; i < ColumnCount - 1; i++)
            {
                <td></td>
            }
            @RenderMonthTotalCell(Cells.Last())
        </tr>;

    /// <summary>
    /// Renders a day cell that includes totals for the day.
    /// </summary>
    protected virtual RenderFragment RenderDayTotalCell(CalendarCell cell) =>
        @<div class="mud-cal-month-cell" style="@DayStyle(cell)">
            @RenderCellDayNumber(cell)
            @if (TotalCalendar.ShowDayTotal)
            {
                foreach (var value in ((TotalCell)cell).Values)
                {
                    @RenderTotal(value)
                }
            }
            @RenderCellContents(cell)
        </div>;

    /// <summary>
    /// Renders a cell that shows totals for the week.
    /// </summary>
    protected virtual RenderFragment RenderWeekTotalCell(CalendarCell cell) =>
        @<div class="mud-cal-month-cell mud-cal-total-cell" style="@DayStyle(cell)">
            <div class="mud-cal-month-cell-title">Week Total</div>
            @foreach (var value in ((TotalCell)cell).Values)
            {
                @RenderTotal(value)
            }
        </div>;

    /// <summary>
    /// Renders a cell that shows the totals for the month.
    /// </summary>
    protected virtual RenderFragment RenderMonthTotalCell(CalendarCell cell) =>
        @<div class="mud-cal-month-cell mud-cal-total-cell" style="@DayStyle(cell)">
            <div class="mud-cal-month-cell-title">Month Total</div>
            @foreach (var value in ((TotalCell)cell).Values)
            {
                @RenderTotal(value)
            }
        </div>;

    /// <summary>
    /// Renders the totals.
    /// </summary>
    protected virtual RenderFragment RenderTotal(Value value) =>
        @<div class="@GetTotalClassname(value.Definition)" style="@GetTotalStyle(value.Definition)">
            @TotalCalendar.TotalTemplate.Invoke(value)
        </div>;

}